#+TITLE: C Game Engine
#+AUTHOR: Ramsay Carslaw
#+OPTIONS: toc:2

* Table of Contents 
[TABLE-OF-CONTENTS]

* Introduction
The aim of this is to create a platform to make creating games in C more easy.

* Usage

*
To create a new StateManger you can use the init and free functions
#+BEGIN_SRC C
#include "engine/engine.h"

StateManger *statemanger;
STATEMANAGER_init(statemanager);
// code goes here
STATEMANGER_free(statemanager);
#+END_SRC
When you create a statemanger control of the memory is passed to you. To destroy it agan you can use the deconstructer as shown above.
* Testing
The following test of the state manger can be performed
#+BEGIN_SRC C :export both

#include <stdio.h>
#include "~/code/C/engine/include/state.h"

unsigned int initState1() {
  printf("state 1 created\n");
  return 0;
}

unsigned int destroyState1() {
  printf("state 1 destroyed\n");
  return 0;
}

unsigned int initState2() {
  printf("state 2 created\n");
  return 0;
}

unsigned int updateState2(float deltatime) {
  printf("state 2 update %f\n", deltatime);
  return 0;
}

unsigned int destroyState2() {
  printf("state 2 destroyed\n");
  return 0;
}

int main() {
  StateManager statemanager;
  STATEMANAGER_init(&statemanager);

  State state1 = {0};
  state1.init = initState1;
  state1.destroy = destroyState1;

  State state2 = {0};
  state2.init = initState2;
  state2.update = updateState2;;
  state2.destroy = destroyState2;

  STATEMANAGER_push(&statemanager, &state1);
  STATEMANAGER_update(&statemanager, 10.0f);

  STATEMANAGER_push(&statemanager, &state2);
  STATEMANAGER_update(&statemanager, 10.0f);

  STATEMANAGER_pop(&statemanager);
  STATEMANAGER_update(&statemanager, 10.0f);

  STATEMANAGER_free(&statemanager);
}

#+END_SRC

#+RESULTS:

* Installation
Place the engine folder in your project and add
#+BEGIN_SRC C
#include "./engine/engine.h"
#+END_SRC
